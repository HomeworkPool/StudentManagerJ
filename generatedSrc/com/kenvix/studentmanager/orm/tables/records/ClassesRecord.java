/*
 * This file is generated by jOOQ.
 */
package com.kenvix.studentmanager.orm.tables.records;


import com.kenvix.studentmanager.orm.tables.Classes;
import com.kenvix.studentmanager.orm.tables.interfaces.IClasses;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClassesRecord extends UpdatableRecordImpl<ClassesRecord> implements Record2<Long, Long>, IClasses {

    private static final long serialVersionUID = -1655739653;

    /**
     * Setter for <code>classes.id</code>.
     */
    @Override
    public ClassesRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>classes.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>classes.master_id</code>.
     */
    @Override
    public ClassesRecord setMasterId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>classes.master_id</code>.
     */
    @Override
    public Long getMasterId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Classes.CLASSES.ID;
    }

    @Override
    public Field<Long> field2() {
        return Classes.CLASSES.MASTER_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getMasterId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getMasterId();
    }

    @Override
    public ClassesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ClassesRecord value2(Long value) {
        setMasterId(value);
        return this;
    }

    @Override
    public ClassesRecord values(Long value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IClasses from) {
        setId(from.getId());
        setMasterId(from.getMasterId());
    }

    @Override
    public <E extends IClasses> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClassesRecord
     */
    public ClassesRecord() {
        super(Classes.CLASSES);
    }

    /**
     * Create a detached, initialised ClassesRecord
     */
    public ClassesRecord(Long id, Long masterId) {
        super(Classes.CLASSES);

        set(0, id);
        set(1, masterId);
    }
}
