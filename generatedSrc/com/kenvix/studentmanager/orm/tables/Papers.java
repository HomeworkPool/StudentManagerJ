/*
 * This file is generated by jOOQ.
 */
package com.kenvix.studentmanager.orm.tables;


import com.kenvix.studentmanager.orm.DefaultSchema;
import com.kenvix.studentmanager.orm.Indexes;
import com.kenvix.studentmanager.orm.Keys;
import com.kenvix.studentmanager.orm.tables.records.PapersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Papers extends TableImpl<PapersRecord> {

    private static final long serialVersionUID = 1290799769;

    /**
     * The reference instance of <code>papers</code>
     */
    public static final Papers PAPERS = new Papers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PapersRecord> getRecordType() {
        return PapersRecord.class;
    }

    /**
     * The column <code>papers.id</code>.
     */
    public final TableField<PapersRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>papers.person_id</code>.
     */
    public final TableField<PapersRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>papers.title</code>.
     */
    public final TableField<PapersRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>papers</code> table reference
     */
    public Papers() {
        this(DSL.name("papers"), null);
    }

    /**
     * Create an aliased <code>papers</code> table reference
     */
    public Papers(String alias) {
        this(DSL.name(alias), PAPERS);
    }

    /**
     * Create an aliased <code>papers</code> table reference
     */
    public Papers(Name alias) {
        this(alias, PAPERS);
    }

    private Papers(Name alias, Table<PapersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Papers(Name alias, Table<PapersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Papers(Table<O> child, ForeignKey<O, PapersRecord> key) {
        super(child, key, PAPERS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAPERS_BY_PERSON_ID);
    }

    @Override
    public Identity<PapersRecord, Long> getIdentity() {
        return Keys.IDENTITY_PAPERS;
    }

    @Override
    public UniqueKey<PapersRecord> getPrimaryKey() {
        return Keys.KEY_PAPERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PapersRecord>> getKeys() {
        return Arrays.<UniqueKey<PapersRecord>>asList(Keys.KEY_PAPERS_PRIMARY);
    }

    @Override
    public Papers as(String alias) {
        return new Papers(DSL.name(alias), this);
    }

    @Override
    public Papers as(Name alias) {
        return new Papers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Papers rename(String name) {
        return new Papers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Papers rename(Name name) {
        return new Papers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
