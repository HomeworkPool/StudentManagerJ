/*
 * This file is generated by jOOQ.
 */
package com.kenvix.studentmanager.orm.tables;


import com.kenvix.studentmanager.orm.DefaultSchema;
import com.kenvix.studentmanager.orm.Indexes;
import com.kenvix.studentmanager.orm.Keys;
import com.kenvix.studentmanager.orm.enums.PersonsSex;
import com.kenvix.studentmanager.orm.enums.PersonsStatus;
import com.kenvix.studentmanager.orm.enums.PersonsType;
import com.kenvix.studentmanager.orm.tables.records.PersonsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * View 'student_manager.people_student' references invalid table(s) or column(s) 
 * or function(s) or definer/invoker of view lack rights to use them
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Persons extends TableImpl<PersonsRecord> {

    private static final long serialVersionUID = 1052731617;

    /**
     * The reference instance of <code>persons</code>
     */
    public static final Persons PERSONS = new Persons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonsRecord> getRecordType() {
        return PersonsRecord.class;
    }

    /**
     * The column <code>persons.id</code>.
     */
    public final TableField<PersonsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>persons.name</code>.
     */
    public final TableField<PersonsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>persons.sex</code>.
     */
    public final TableField<PersonsRecord, PersonsSex> SEX = createField(DSL.name("sex"), org.jooq.impl.SQLDataType.VARCHAR(7).nullable(false).defaultValue(org.jooq.impl.DSL.inline("unknown", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.kenvix.studentmanager.orm.enums.PersonsSex.class), this, "");

    /**
     * The column <code>persons.type</code>.
     */
    public final TableField<PersonsRecord, PersonsType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(21).nullable(false).defaultValue(org.jooq.impl.DSL.inline("student_undergraduate", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.kenvix.studentmanager.orm.enums.PersonsType.class), this, "");

    /**
     * The column <code>persons.is_graduable</code>.
     */
    public final TableField<PersonsRecord, Byte> IS_GRADUABLE = createField(DSL.name("is_graduable"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>persons.status</code>.
     */
    public final TableField<PersonsRecord, PersonsStatus> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(9).nullable(false).defaultValue(org.jooq.impl.DSL.inline("normal", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.kenvix.studentmanager.orm.enums.PersonsStatus.class), this, "");

    /**
     * Create a <code>persons</code> table reference
     */
    public Persons() {
        this(DSL.name("persons"), null);
    }

    /**
     * Create an aliased <code>persons</code> table reference
     */
    public Persons(String alias) {
        this(DSL.name(alias), PERSONS);
    }

    /**
     * Create an aliased <code>persons</code> table reference
     */
    public Persons(Name alias) {
        this(alias, PERSONS);
    }

    private Persons(Name alias, Table<PersonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Persons(Name alias, Table<PersonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("View 'student_manager.people_student' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them"), TableOptions.table());
    }

    public <O extends Record> Persons(Table<O> child, ForeignKey<O, PersonsRecord> key) {
        super(child, key, PERSONS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSONS_BY_NAME, Indexes.PERSONS_BY_TYPE);
    }

    @Override
    public Identity<PersonsRecord, Long> getIdentity() {
        return Keys.IDENTITY_PERSONS;
    }

    @Override
    public UniqueKey<PersonsRecord> getPrimaryKey() {
        return Keys.KEY_PERSONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PersonsRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonsRecord>>asList(Keys.KEY_PERSONS_PRIMARY);
    }

    @Override
    public Persons as(String alias) {
        return new Persons(DSL.name(alias), this);
    }

    @Override
    public Persons as(Name alias) {
        return new Persons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(String name) {
        return new Persons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(Name name) {
        return new Persons(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, PersonsSex, PersonsType, Byte, PersonsStatus> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
