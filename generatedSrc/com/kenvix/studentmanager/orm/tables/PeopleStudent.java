/*
 * This file is generated by jOOQ.
 */
package com.kenvix.studentmanager.orm.tables;


import com.kenvix.studentmanager.orm.DefaultSchema;
import com.kenvix.studentmanager.orm.tables.records.PeopleStudentRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * View 'student_manager.people_student' references invalid table(s) or column(s) 
 * or function(s) or definer/invoker of view lack rights to use them
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PeopleStudent extends TableImpl<PeopleStudentRecord> {

    private static final long serialVersionUID = 768134325;

    /**
     * The reference instance of <code>people_student</code>
     */
    public static final PeopleStudent PEOPLE_STUDENT = new PeopleStudent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeopleStudentRecord> getRecordType() {
        return PeopleStudentRecord.class;
    }

    /**
     * Create a <code>people_student</code> table reference
     */
    public PeopleStudent() {
        this(DSL.name("people_student"), null);
    }

    /**
     * Create an aliased <code>people_student</code> table reference
     */
    public PeopleStudent(String alias) {
        this(DSL.name(alias), PEOPLE_STUDENT);
    }

    /**
     * Create an aliased <code>people_student</code> table reference
     */
    public PeopleStudent(Name alias) {
        this(alias, PEOPLE_STUDENT);
    }

    private PeopleStudent(Name alias, Table<PeopleStudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private PeopleStudent(Name alias, Table<PeopleStudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("View 'student_manager.people_student' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them"), TableOptions.view("create view `people_student` as select `student_manager`.`peoples`.`id` AS `id`,`student_manager`.`peoples`.`name` AS `name`,`student_manager`.`peoples`.`sex` AS `sex`,`student_manager`.`peoples`.`type` AS `type` from `student_manager`.`peoples` where (`student_manager`.`peoples`.`type` = 'student_undergraduate')"));
    }

    public <O extends Record> PeopleStudent(Table<O> child, ForeignKey<O, PeopleStudentRecord> key) {
        super(child, key, PEOPLE_STUDENT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public PeopleStudent as(String alias) {
        return new PeopleStudent(DSL.name(alias), this);
    }

    @Override
    public PeopleStudent as(Name alias) {
        return new PeopleStudent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PeopleStudent rename(String name) {
        return new PeopleStudent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PeopleStudent rename(Name name) {
        return new PeopleStudent(name, null);
    }
}
